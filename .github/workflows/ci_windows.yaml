name: CI - Windows

on:
  workflow_dispatch:

permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.head_ref != '' }}

jobs:
  ci:
    name: Build
    runs-on: windows-latest
    permissions:
      actions: write

    env:
      vcpkg_path: "c:/vcpkg"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: true  # Ensure submodules are checked out


      - name: Setup devcmd
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build tools
        run: |
          if ((Get-Command "ninja.exe" -ErrorAction SilentlyContinue) -eq $null)
          {
             choco install ninja
          }
          where.exe ninja
          ninja --version

      # https://learn.microsoft.com/en-us/vcpkg/users/binarycaching#gha
      - name: Set variables for vcpkg
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', (process.env.ACTIONS_CACHE_URL || ''));
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', (process.env.ACTIONS_RUNTIME_TOKEN || ''));

      - name: Install dependencies with vcpkg
        run: |
          # create our own triplet
          New-Item `
            -Force `
            -ItemType File `
            -Path "${{ env.vcpkg_path }}/triplets_overlay/x64-windows-static-md-release.cmake"
          # OpenSSL isn't compatible with `/guard:cf` flag so we omit it for now, see: https://github.com/openssl/openssl/issues/22554
          Add-Content `
            -Path "${{ env.vcpkg_path }}/triplets_overlay/x64-windows-static-md-release.cmake" `
            -Value @("set(VCPKG_TARGET_ARCHITECTURE x64)",
              "set(VCPKG_LIBRARY_LINKAGE static)",
              "set(VCPKG_CRT_LINKAGE dynamic)",
              "set(VCPKG_BUILD_TYPE release)")
          # clear buildtrees after each package installation to reduce disk space requirements
          $packages = `
            "openssl:x64-windows-static-md-release",
            "python3:x64-windows-static-md-release",
            "ffmpeg[ffmpeg,x264,nonfree,gpl,vpx,webp,zlib,xml2]:x64-windows-static-md-release",
            "zlib:x64-windows-static-md-release"
          ${{ env.vcpkg_path }}/vcpkg.exe upgrade `
            --no-dry-run `
            --overlay-triplets="${{ env.vcpkg_path }}/triplets_overlay"
          ${{ env.vcpkg_path }}/vcpkg.exe install `
            --binarysource="clear;x-gha,readwrite" `
            --clean-after-build `
            --overlay-triplets="${{ env.vcpkg_path }}/triplets_overlay" `
            $packages


      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: "5.15.2"
          arch: win64_msvc2019_64
          archives: qtbase qtquickcontrols2 qtdeclarative qttools d3dcompiler_47 
          cache: true

      - name: Build FVD
        run: |
          $env:CXXFLAGS+="/DQT_FORCE_ASSERTS /WX"
          cmake `
            -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=RelWithDebInfo `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.vcpkg_path }}/scripts/buildsystems/vcpkg.cmake" `
            -DMSVC_RUNTIME_DYNAMIC=ON `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static-md-release `
            -DVERBOSE_CONFIGURE=ON
          cmake --build build
          cmake --install build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./build/bin
